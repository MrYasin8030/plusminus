
namespace CO {
	auto ClientUpdate = 0x2FB040;
	auto ClientUpdate_Sleeping = 0x2FACB0;
	auto cursor_get_visible = 0x1798020;
	auto get_Entity = 0x590920; // localplayer
	auto Refract = 0x8B06E0;
	auto SendSignalBroadcast = 0x3B5690;
	auto Magnitude2D = 0x1CAA460;
	auto GetJumpHeight = 0x2FFE40;
	auto MathfAbs = 0x17A9CC0;
	auto MathfMax = 0x17AA890;
	auto GetHeight = 0x2FF670;
	auto GetRadius = 0x301400;
	auto CheckCapsule = 0x2068580; // public static bool CheckCapsule(Vector3 start, Vector3 end, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	auto EffectRun = 0x938830;
	auto RebuildAll = 0xAC72C0;
	auto GetMaxSpeed = 0x2FFFE0;
	auto DoFixedUpdate = 0x8943D0;
	auto CanAffordUpgrade = 0x52FC80;
	auto CanChangeToGrade = 0x52FE50;
	auto IsUpgradeBlocked = 0x532140;
	auto get_jumped = 0x1C265A0;
	auto get_velocity = 0x206CD90;
	auto set_velocity = 0x206D2B0;
	auto get_rotation = 0xAB9FA0;
	auto Play = 0x9733B0; // ViewModel
	auto GetRandomVelocity = 0x817AF0;
	auto Client = 0x2FF90D8; // ConVar.Client_TypeInfo
	auto CreateEffect = 0x929740;
	auto UpgradeToGrade = 0x533420;
	auto AddPunch = 0x7A36B0;
	auto MoveTowards = 0x1F82890;
	auto Jump = 0x8965D0;
	auto Total = 0x5F38D0;
	auto IsDucked = 0x3036C0;
	auto PropertyToId = 0x186BA20;
	auto VisUpdateUsingCulling = 0x312EF0;
	auto SetInt = 0x17A9020;
	auto SetColor = 0x17A8C30;
	auto set_shader = 0x17A9C20;
	auto get_shader = 0x17A9A90;
	auto get_material = 0x1869750;
	auto get_Renderers = 0x3DDF90;
	auto ShaderFind = 0x186B900;
	auto OnLand = 0x305D70; // BasePlayer->OnLand
	auto get_position = 0xAB9C50; // playereyes->get_position
	auto IsBeingHacked = 0x2E2340;
	auto IsFullyHacked = 0x2E2B90;
	auto ForceToPos = 0x2FE970;
	auto UpdateAmbient = 0xC39C30; // protected void UpdateAmbient() { } || TOD_Sky
	auto set_rayleigh = 0x7E8360;
	auto BasePlayer = 0x2FF96F0; // BasePlayer_TypeInfo
	auto AssistPlayer = 0x3056B0; // public void Menu_AssistPlayer(BasePlayer player) { }
	auto Launch = 0x8B0030; // internal void Launch() { }
	auto KnockDoor = 0x920A10; // public void Menu_KnockDoor(BasePlayer player) { }
	auto OpenDoor = 0x920A90; // public void Menu_OpenDoor(BasePlayer player) { }
	auto OpenHatch = 0x920AE0; // public void Menu_ToggleHatch(BasePlayer player) { }
	auto IsHidden = 0x2ED5B0; // public class StashContainer : StorageContainer
	auto get_isHeadshot = 0x7A8C60; // public bool get_isHeadshot() { }
	auto DoHitNotify = 0x3A92D0; // public void DoHitNotify(HitInfo info) { }
	auto StartAttackCooldown = 0x39EA60; // protected void StartAttackCooldown(float cooldown) { }
	auto ProcessAttack = 0x2EAA20; // protected virtual void ProcessAttack(HitTest hit) { }
	auto get_transform = 0x1795940; // public Transform get_transform() { } | UnityEngine::Component
	auto HitTest = 0x2FF8958; // HitTest_TypeInfo
	auto ServerRPC = 0x3B5C90;
	auto TraceAll = 0xBEF600; // public static void TraceAll(HitTest test, List<TraceInfo> traces, int layerMask = -5) { }
	auto BaseNetworkable = 0x2FF92B0; // BaseNetworkable_TypeInfo
	auto SendProjectileAttack = 0x30F180; // public void SendProjectileAttack(PlayerProjectileAttack attack) { }
	auto GetModifiedAimConeDirection = 0x984350; // public static Vector3 GetModifiedAimConeDirection(float aimCone, Vector3 inputVec, bool anywhereInside = True) { }
	auto set_flying = 0x1C26670; // public void set_flying(bool value) { } 
	auto CanAttack = 0x2F79B0; // public bool CanAttack() { }
	auto SendClientTick = 0x30EAC0; // internal void SendClientTick() { }
	auto HandleRunning = 0x896340; // private void HandleRunning(ModelState state, bool wantsRun) { }
	auto HandleJumping = 0x896220;
	auto CreateProjectile = 0x72EF20; // private Projectile CreateProjectile(string prefabPath, Vector3 pos, Vector3 forward, Vector3 velocity) { }
	auto CanHoldItems = 0x2EE0F0; // public virtual bool CanHoldItems() { }
	auto Run = 0x20790B0; // public static string Run(ConsoleSystem.Option options, string strCommand, object[] args) { }
	auto DoMovement = 0x8AE570; // private void DoMovement(float deltaTime) { }
	auto DoHit = 0x8ADE60; // private bool DoHit(HitTest test, Vector3 point, Vector3 normal) { }
	auto ClientInput = 0x2F9600; // internal virtual void ClientInput(InputState state) { }
	auto ConvarGraphics = 0x2FF7FE0; // ConVar.Graphics_TypeInfo
	auto ClosestPoint = 0x3ACAD0; // public Vector3 ClosestPoint(Vector3 position) { }
	auto LineOfSight = 0x5BBB40; // public static bool LineOfSight(Vector3 p0, Vector3 p1, int layerMask, float padding = 0) { }
}
