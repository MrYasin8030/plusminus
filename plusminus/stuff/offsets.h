
namespace CO {
	auto ClientUpdate = 0x303380;
	auto ClientUpdate_Sleeping = 0x302FF0;
	auto cursor_get_visible = 0x1828E80;
	auto get_Entity = 0x52C940; // localplayer
	auto Refract = 0x5C8080;
	auto SendSignalBroadcast = 0x434230;
	auto Magnitude2D = 0x1D73150;
	auto GetJumpHeight = 0x308980;
	auto MathfAbs = 0x183AD80;
	auto MathfMax = 0x183B950;
	auto GetHeight = 0x3081B0;
	auto GetRadius = 0x309E40;
	auto CheckCapsule = 0x2183AD0; // public static bool CheckCapsule(Vector3 start, Vector3 end, float radius, int layerMask, QueryTriggerInteraction queryTriggerInteraction) { }
	auto EffectRun = 0x97BC90; // Effect.client
	auto RebuildAll = 0xB30710;
	auto GetMaxSpeed = 0x308B20;
	auto DoFixedUpdate = 0xB39840;
	auto CanAffordUpgrade = 0x58A390;
	auto CanChangeToGrade = 0x58A560;
	auto IsUpgradeBlocked = 0x58C850;
	auto get_jumped = 0x1D0C050;
	auto get_velocity = 0x21882E0;
	auto set_velocity = 0x2188800;
	auto get_rotation = 0x7366D0; // playereyes
	auto Play = 0x76E070; // ViewModel
	auto GetRandomVelocity = 0x54D650;
	auto Client = 0x31BF570; // ConVar.Client_TypeInfo
	auto CreateEffect = 0x96FCE0;
	auto UpgradeToGrade = 0x58DB20;
	auto AddPunch = 0x438240;
	auto MoveTowards = 0x208E030;
	auto Jump = 0xB3BA40;
	auto Total = 0x3E1F80; // DamageTypeList
	auto IsDucked = 0x30C1F0;
	auto PropertyToId = 0x18DC800;
	auto VisUpdateUsingCulling = 0x31C290;
	auto SetInt = 0x183A0E0;
	auto SetColor = 0x1839CF0;
	auto set_shader = 0x183ACE0;
	auto get_shader = 0x183AB50;
	auto get_material = 0x18D9600;
	auto get_Renderers = 0x3FE2C0;
	auto ShaderFind = 0x18DC3F0;
	auto OnLand = 0x30E9E0; // BasePlayer->OnLand
	auto get_position = 0x736380; // playereyes->get_position
	auto IsBeingHacked = 0x2EA240;
	auto IsFullyHacked = 0x2EAA90;
	auto ForceToPos = 0x3074F0;
	auto UpdateAmbient = 0x118AF30; // public void UpdateAmbient() { } || TOD_Sky
	auto set_rayleigh = 0x82BC10;
	auto AssistPlayer = 0x30E320; // public void Menu_AssistPlayer(BasePlayer player) { }
	auto Launch = 0x5C79D0; // internal void Launch() { }
	auto KnockDoor = 0x9669A0; // public void Menu_KnockDoor(BasePlayer player) { }
	auto OpenDoor = 0x966A20; // public void Menu_OpenDoor(BasePlayer player) { }
	auto OpenHatch = 0x966A70; // public void Menu_ToggleHatch(BasePlayer player) { }
	auto IsHidden = 0x2F5360; // public class StashContainer : StorageContainer
	auto get_isHeadshot = 0x43D740; // public bool get_isHeadshot() { }
	auto DoHitNotify = 0x428200; // public void DoHitNotify(HitInfo info) { }
	auto StartAttackCooldown = 0x41DB70; // protected void StartAttackCooldown(float cooldown) { }
	auto ProcessAttack = 0x2F28A0; // protected virtual void ProcessAttack(HitTest hit) { }
	auto get_transform = 0x1826810; // public Transform get_transform() { } | UnityEngine::Component
	auto HitTest = 0x31BEDF8; // HitTest_TypeInfo
	auto ServerRPC = 0x434830;
	auto BaseNetworkable = 0x31BF748; // BaseNetworkable_TypeInfo
	auto SendProjectileAttack = 0x318290; // public void SendProjectileAttack(PlayerProjectileAttack attack) { }
	auto GetModifiedAimConeDirection = 0x989610; // public static Vector3 GetModifiedAimConeDirection(float aimCone, Vector3 inputVec, bool anywhereInside = True) { }
	auto set_flying = 0x1D0C120; // public void set_flying(bool value) { }
	auto CanAttack = 0x2FF660; // public bool CanAttack() { }
	auto SendClientTick = 0x317C00; // internal void SendClientTick() { }
	auto HandleRunning = 0xB3B7B0; // private void HandleRunning(ModelState state, bool wantsRun) { }
	auto HandleJumping = 0xB3B690;
	auto CreateProjectile = 0x73BD70; // private Projectile CreateProjectile(string prefabPath, Vector3 pos, Vector3 forward, Vector3 velocity) { }
	auto CanHoldItems = 0x2F5EA0; // public virtual bool CanHoldItems() { }
	auto Run = 0x21944E0; // public static string Run(ConsoleSystem.Option options, string strCommand, object[] args) { }
	auto DoMovement = 0x5C5F80; // private void DoMovement(float deltaTime) { }
	auto DoHit = 0x5C5890; // private bool DoHit(HitTest test, Vector3 point, Vector3 normal) { }
	auto ClientInput = 0x3017E0; // internal virtual void ClientInput(InputState state) { }
	auto ConvarGraphics = 0x31BE480; // ConVar.Graphics_TypeInfo
	auto ClosestPoint = 0x42B930; // public Vector3 ClosestPoint(Vector3 position) { }
	auto LineOfSight = 0x7F3C20; // public static bool LineOfSight(Vector3 p0, Vector3 p1, int layerMask, float padding = 0) { }
}
